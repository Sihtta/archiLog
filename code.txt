UserController:
<?php

namespace App\Application\Port\Http\Controller;

use App\Domain\User\Entity\User;
use App\Domain\User\Entity\UsernameHistory;
use App\Form\UserPasswordType;
use App\Form\UserType;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;

class UserController extends AbstractController
{
    #[Route('/utilisateur/edition/{id}', name: 'user.edit', methods: ['GET', 'POST'])]
    public function edit(User $choosenUser, Request $request, EntityManagerInterface $manager): Response
    {
        if (!$this->isGranted('ROLE_USER') || $this->getUser() !== $choosenUser) {
            return $this->redirectToRoute('access_denied');
        }

        $oldPseudo = $choosenUser->getPseudo();
        $form = $this->createForm(UserType::class, $choosenUser);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $newPseudo = $form->getData()->getPseudo();

            if ($oldPseudo !== $newPseudo) {
                $usernameHistory = new UsernameHistory();
                $usernameHistory->setUser($choosenUser)
                    ->setOldPseudo($oldPseudo)
                    ->setNewPseudo($newPseudo)
                    ->setChangedAt(new \DateTimeImmutable());

                $manager->persist($usernameHistory);
                $manager->flush();
            }

            $choosenUser->setPseudo($newPseudo);
            $manager->persist($choosenUser);
            $manager->flush();

            $this->addFlash('success_edit_profile', 'Les informations de votre compte ont bien été modifiées.');

            return $this->redirectToRoute('user.edit', ['id' => $choosenUser->getId()]);
        }

        return $this->render('pages/user/edit.html.twig', [
            'form' => $form->createView(),
        ]);
    }

    #[Route('/utilisateur/edition-mot-de-passe/{id}', 'user.edit.password', methods: ['GET', 'POST'])]
    public function editPassword(User $choosenUser, Request $request, EntityManagerInterface $manager, UserPasswordHasherInterface $hasher): Response
    {
        if (!$this->isGranted('ROLE_USER') || $this->getUser() !== $choosenUser) {
            return $this->redirectToRoute('access_denied');
        }

        $form = $this->createForm(UserPasswordType::class);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            if ($hasher->isPasswordValid($choosenUser, $form->getData()['plainPassword'])) {
                $choosenUser->setPassword(
                    $hasher->hashPassword($choosenUser, $form->getData()['newPassword'])
                );

                $this->addFlash('success_password_change', 'Votre mot de passe a été mis à jour avec succès.');

                $manager->persist($choosenUser);
                $manager->flush();

                return $this->redirectToRoute('user.edit.password', ['id' => $choosenUser->getId()]);
            } else {
                $this->addFlash('warning_password_mismatch', 'Les mots de passe ne correspondent pas.');
            }
        }

        return $this->render('pages/user/edit_password.html.twig', [
            'form' => $form->createView()
        ]);
    }

    #[Route("/access-denied", name: "access_denied")]
    public function accessDenied(): Response
    {
        return $this->render('pages/accessDenied.html.twig');
    }
}
UserControllerTest:
<?php

namespace Tests\Application\Controller;

use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use App\Domain\User\Entity\User;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;

class UserControllerTest extends WebTestCase
{
    private $client;
    private $entityManager;
    private $userPasswordHasher;

    protected function setUp(): void
    {
        parent::setUp();
        self::ensureKernelShutdown();
        $this->client = static::createClient();
        
        $this->entityManager = static::getContainer()->get(EntityManagerInterface::class);
        $this->userPasswordHasher = static::getContainer()->get(UserPasswordHasherInterface::class);
        
        // Nettoyer et charger les données de test
        $this->entityManager->getConnection()->executeQuery('DELETE FROM user');
    }

    public function testEditUserAccessDenied()
    {
        $user = $this->createUser('testUser');
        $this->client->request('GET', '/utilisateur/edition/' . $user->getId());
        $this->assertResponseRedirects('/access-denied');
    }

    public function testEditUserSuccessful()
    {
        $user = $this->createUser('oldPseudo');

        $this->client->loginUser($user);
        $this->client->request('GET', '/utilisateur/edition/' . $user->getId());

        $this->assertResponseIsSuccessful();
        $this->assertSelectorExists('form');

        $this->client->submitForm('Modifier', [
            'user[pseudo]' => 'newPseudo'
        ]);

        $this->assertResponseRedirects('/utilisateur/edition/' . $user->getId());

        $updatedUser = $this->entityManager->getRepository(User::class)->find($user->getId());
        $this->assertEquals('newPseudo', $updatedUser->getPseudo());
    }

    public function testEditPasswordSuccessful()
    {
        $user = $this->createUser('testUser', 'oldPassword');

        $this->client->loginUser($user);
        $this->client->request('GET', '/utilisateur/edition-mot-de-passe/' . $user->getId());

        $this->assertResponseIsSuccessful();
        $this->assertSelectorExists('form');

        $this->client->submitForm('Modifier', [
            'user_password[current_password]' => 'oldPassword', // Nom du champ correct
            'user_password[new_password][first]' => 'newSecurePassword',
            'user_password[new_password][second]' => 'newSecurePassword',
        ]);

        $this->assertResponseRedirects('/utilisateur/edition-mot-de-passe/' . $user->getId());

        $updatedUser = $this->entityManager->getRepository(User::class)->find($user->getId());
        $this->assertTrue($this->userPasswordHasher->isPasswordValid($updatedUser, 'newSecurePassword'));
    }

    private function createUser(string $pseudo, string $password = 'password'): User
    {
        $user = new User();
        $user->setEmail($pseudo . '@example.com'); // Ajoute un email valide
        $user->setFullName('Test User'); // Évite d'avoir un champ nul si nécessaire
        $user->setPseudo($pseudo);
        $user->setPassword($this->userPasswordHasher->hashPassword($user, $password));

        $this->entityManager->persist($user);
        $this->entityManager->flush();

        return $user;
    }
}