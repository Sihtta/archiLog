UserRepositoryTest:
<?php

namespace Tests\Domain\User;

use App\Domain\User\Entity\User;
use App\Domain\User\Repository\UserRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;

class UserRepositoryTest extends KernelTestCase
{
    private EntityManagerInterface $entityManager;
    private UserRepository $userRepository;

    protected function setUp(): void
    {
        self::bootKernel();
        $this->entityManager = self::getContainer()->get(EntityManagerInterface::class);
        $this->userRepository = $this->entityManager->getRepository(User::class);

        // Nettoyer la base et insérer des données de test
        $this->entityManager->createQuery('DELETE FROM App\Domain\User\Entity\User')->execute();

        $user1 = (new User())
            ->setEmail('test1@example.com')
            ->setFullName('User One') // Ajout de fullName
            ->setExp(100)
            ->setPassword('hashed_password1');

        $user2 = (new User())
            ->setEmail('test2@example.com')
            ->setFullName('User Two') // Ajout de fullName
            ->setExp(200)
            ->setPassword('hashed_password2');

        $user3 = (new User())
            ->setEmail('test3@example.com')
            ->setFullName('User Three') // Ajout de fullName
            ->setExp(50)
            ->setPassword('hashed_password3');

        $this->entityManager->persist($user1);
        $this->entityManager->persist($user2);
        $this->entityManager->persist($user3);
        $this->entityManager->flush();
    }

    public function testFindOneByEmail(): void
    {
        $user = $this->userRepository->findOneByEmail('test1@example.com');
        $this->assertNotNull($user);
        $this->assertEquals('test1@example.com', $user->getEmail());
    }

    public function testFindTopUsersByExp(): void
    {
        $users = $this->userRepository->findTopUsersByExp(2);

        $this->assertCount(2, $users);
        $this->assertEquals(200, $users[0]->getExp()); // Le plus expérimenté en premier
        $this->assertEquals(100, $users[1]->getExp());
    }

    public function testUpgradePassword(): void
    {
        $user = $this->userRepository->findOneByEmail('test1@example.com');
        $this->assertNotNull($user);

        $newHashedPassword = 'new_hashed_password';
        $this->userRepository->upgradePassword($user, $newHashedPassword);

        $updatedUser = $this->userRepository->findOneByEmail('test1@example.com');
        $this->assertEquals($newHashedPassword, $updatedUser->getPassword());
    }

    protected function tearDown(): void
    {
        parent::tearDown();
        $this->entityManager->close();
    }
}
UsernameHistoryRepositoryTest:
<?php

namespace Tests\Domain\User;

use App\Domain\User\Entity\UsernameHistory;
use App\Domain\User\Repository\UsernameHistoryRepository;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\Persistence\ManagerRegistry;
use PHPUnit\Framework\TestCase;

class UsernameHistoryRepositoryTest extends TestCase
{
    private UsernameHistoryRepository $usernameHistoryRepository;

    protected function setUp(): void
    {
        $managerRegistry = $this->createMock(ManagerRegistry::class);
        $this->usernameHistoryRepository = new UsernameHistoryRepository($managerRegistry);
    }

    public function testFindAll(): void
    {
        $history = $this->usernameHistoryRepository->findAll();
        $this->assertIsArray($history);
    }

    public function testFindOneBy(): void
    {
        $history = $this->usernameHistoryRepository->findOneBy(['id' => 1]);
        $this->assertNull($history); // Par défaut, il n'y a pas de données en base
    }
}
UsernameHistoryRepository:<?php

namespace App\Domain\User\Repository;

use App\Domain\User\Entity\UsernameHistory;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<UsernameHistory>
 *
 * @method UsernameHistory|null find($id, $lockMode = null, $lockVersion = null)
 * @method UsernameHistory|null findOneBy(array $criteria, array $orderBy = null)
 * @method UsernameHistory[]    findAll()
 * @method UsernameHistory[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class UsernameHistoryRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, UsernameHistory::class);
    }

    //    /**
    //     * @return UsernameHistory[] Returns an array of UsernameHistory objects
    //     */
    //    public function findByExampleField($value): array
    //    {
    //        return $this->createQueryBuilder('u')
    //            ->andWhere('u.exampleField = :val')
    //            ->setParameter('val', $value)
    //            ->orderBy('u.id', 'ASC')
    //            ->setMaxResults(10)
    //            ->getQuery()
    //            ->getResult()
    //        ;
    //    }

    //    public function findOneBySomeField($value): ?UsernameHistory
    //    {
    //        return $this->createQueryBuilder('u')
    //            ->andWhere('u.exampleField = :val')
    //            ->setParameter('val', $value)
    //            ->getQuery()
    //            ->getOneOrNullResult()
    //        ;
    //    }
}
