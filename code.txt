UserControllerTest:
<?php

namespace App\Tests\Application\Controller;

use App\Domain\User\Entity\User;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Symfony\Component\HttpFoundation\Response;
use Doctrine\ORM\EntityManagerInterface;

class UserControllerTest extends WebTestCase
{
    private function createUser(): User
    {
        $entityManager = self::getContainer()->get(EntityManagerInterface::class);

        $user = new User();
        $user->setEmail('test_' . uniqid() . '@example.com');
        $user->setPseudo('TestUser');
        $user->setPassword('password');
        $user->setFullName('Test User');
        $user->setRoles(['ROLE_USER']);

        $entityManager->persist($user);
        $entityManager->flush();

        return $user;
    }

    public function testEditUser(): void
    {
        $client = static::createClient();
        $user = $this->createUser();
        $client->loginUser($user);

        // AccÃ©der Ã  la page d'Ã©dition de l'utilisateur
        $client->request('GET', '/utilisateur/edition/' . $user->getId());
        $this->assertResponseIsSuccessful();

        // Soumettre le formulaire avec les champs corrects
        $client->submitForm('Modifier mon profil', [
            'user[pseudo]' => 'UpdatedUser',  // Pseudo facultatif
            'user[fullName]' => 'Updated Name', // Modifier le nom complet
            'user[plainPassword]' => 'password',  // Mot de passe
        ]);

        $this->assertResponseRedirects('/utilisateur/edition/' . $user->getId());

        // VÃ©rifier la mise Ã  jour de l'utilisateur
        $entityManager = self::getContainer()->get(EntityManagerInterface::class);
        $updatedUser = $entityManager->getRepository(User::class)->find($user->getId());
        $this->assertSame('UpdatedUser', $updatedUser->getPseudo());
        $this->assertSame('Updated Name', $updatedUser->getFullName());
    }

    public function testEditPassword(): void
    {
        $client = static::createClient();
        $user = $this->createUser();
        $client->loginUser($user);

        // AccÃ©der Ã  la page de modification du mot de passe
        $client->request('GET', '/utilisateur/edition-mot-de-passe/' . $user->getId());
        $this->assertResponseIsSuccessful();

        // Soumettre le formulaire avec les champs corrects
        $client->submitForm('Modifier mon mot de passe', [
            'user_password[plainPassword][first]' => 'password', // Premier champ du mot de passe
            'user_password[plainPassword][second]' => 'newpassword', // DeuxiÃ¨me champ du mot de passe
        ]);

        $this->assertResponseRedirects('/utilisateur/edition-mot-de-passe/' . $user->getId());
    }

    public function testAccessDenied(): void
    {
        $client = static::createClient();
        $user = $this->createUser();

        // Essayer d'accÃ©der Ã  la page sans Ãªtre connectÃ©
        $client->request('GET', '/utilisateur/edition/' . $user->getId());
        $this->assertResponseRedirects('/access-denied');
    }
}
TaskRepositoryTest:
<?php

namespace Tests\Domain\Task;

use App\Domain\Task\Repository\TaskRepository;
use App\Domain\Task\Entity\Task;
use App\Domain\User\Entity\User;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;

class TaskRepositoryTest extends KernelTestCase
{
    private EntityManagerInterface $entityManager;
    private TaskRepository $taskRepository;

    protected function setUp(): void
{
    self::bootKernel();
    $this->entityManager = self::getContainer()->get(EntityManagerInterface::class);
    $this->taskRepository = self::getContainer()->get(TaskRepository::class);

    // Nettoyage des tables
    $this->entityManager->createQuery('DELETE FROM App\Domain\Task\Entity\Task')->execute();
    $this->entityManager->createQuery('DELETE FROM App\Domain\User\Entity\User')->execute();

    // CrÃ©ation d'un utilisateur de test
    $user = new User();
    $user->setEmail('test@example.com');
    $user->setFullName('Test User');
    $user->setExp(100);
    $user->setPassword('hashed_password');
    
    $this->entityManager->persist($user);
    $this->entityManager->flush();

    // CrÃ©ation de tÃ¢ches avec un utilisateur
    $task1 = (new Task())
        ->setTitle('Task 1')
        ->setStatus(Task::STATUS_TODO)
        ->setUser($user);  // ðŸ”¥ Associer l'utilisateur

    $task2 = (new Task())
        ->setTitle('Task 2')
        ->setStatus(Task::STATUS_IN_PROGRESS)
        ->setUser($user);  // ðŸ”¥ Associer l'utilisateur

    $this->entityManager->persist($task1);
    $this->entityManager->persist($task2);
    $this->entityManager->flush();
}

public function testSaveTask(): void
{
    // RÃ©cupÃ©ration de l'utilisateur crÃ©Ã© dans setUp()
    $user = $this->entityManager->getRepository(User::class)->findOneBy(['email' => 'test@example.com']);

    $task = new Task();
    $task->setTitle('Test Task');
    $task->setStatus(Task::STATUS_DONE);
    $task->setUser($user);  // ðŸ”¥ Associer l'utilisateur

    $this->taskRepository->save($task);
    $this->entityManager->clear();

    $retrievedTask = $this->taskRepository->findOneBy(['title' => 'Test Task']);
    $this->assertNotNull($retrievedTask);
    $this->assertEquals(Task::STATUS_DONE, $retrievedTask->getStatus());
}

    public function testFindByStatus(): void
    {
        $tasks = $this->taskRepository->findByStatus(Task::STATUS_TODO);
        $this->assertCount(1, $tasks);
        $this->assertEquals('Task 1', $tasks[0]->getTitle());
    }

    public function testDeleteTask(): void
    {
        $task = $this->taskRepository->findOneBy(['title' => 'Task 1']);
        $this->assertNotNull($task);

        $this->taskRepository->delete($task);
        $this->entityManager->clear();

        $retrievedTask = $this->taskRepository->findOneBy(['title' => 'Task 1']);
        $this->assertNull($retrievedTask);
    }

    protected function tearDown(): void
    {
        parent::tearDown();
        $this->entityManager->close();
    }
}
Usernamerepositorytest:
<?php

namespace Tests\Domain\User;

use PHPUnit\Framework\TestCase;
use App\Domain\User\Entity\UsernameHistory;
use App\Domain\User\Entity\User;
use DateTimeImmutable;

class UsernameHistoryTest extends TestCase
{
    public function testUsernameHistoryCreation()
    {
        $user = $this->createMock(User::class);
        $history = new UsernameHistory();
        $history->setUser($user)
                ->setOldPseudo('OldName')
                ->setNewPseudo('NewName')
                ->setChangedAt(new DateTimeImmutable());

        $this->assertInstanceOf(UsernameHistory::class, $history);
        $this->assertEquals('OldName', $history->getOldPseudo());
        $this->assertEquals('NewName', $history->getNewPseudo());
        $this->assertNotNull($history->getChangedAt());
    }
}
userrepositorytest:
<?php

namespace Tests\Domain\User;

use App\Domain\User\Entity\User;
use App\Domain\User\Repository\UserRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;

class UserRepositoryTest extends KernelTestCase
{
    private EntityManagerInterface $entityManager;
    private UserRepository $userRepository;

    protected function setUp(): void
    {
        self::bootKernel();
        $this->entityManager = self::getContainer()->get(EntityManagerInterface::class);
        $this->userRepository = $this->entityManager->getRepository(User::class);

        // Nettoyer la base et insÃ©rer des donnÃ©es de test
        $this->entityManager->createQuery('DELETE FROM App\Domain\User\Entity\User')->execute();

        $user1 = (new User())
            ->setEmail('test1@example.com')
            ->setFullName('User One') // Ajout de fullName
            ->setExp(100)
            ->setPassword('hashed_password1');

        $user2 = (new User())
            ->setEmail('test2@example.com')
            ->setFullName('User Two') // Ajout de fullName
            ->setExp(200)
            ->setPassword('hashed_password2');

        $user3 = (new User())
            ->setEmail('test3@example.com')
            ->setFullName('User Three') // Ajout de fullName
            ->setExp(50)
            ->setPassword('hashed_password3');

        $this->entityManager->persist($user1);
        $this->entityManager->persist($user2);
        $this->entityManager->persist($user3);
        $this->entityManager->flush();
    }

    public function testFindOneByEmail(): void
    {
        $user = $this->userRepository->findOneByEmail('test1@example.com');
        $this->assertNotNull($user);
        $this->assertEquals('test1@example.com', $user->getEmail());
    }

    public function testFindTopUsersByExp(): void
    {
        $users = $this->userRepository->findTopUsersByExp(2);

        $this->assertCount(2, $users);
        $this->assertEquals(200, $users[0]->getExp()); // Le plus expÃ©rimentÃ© en premier
        $this->assertEquals(100, $users[1]->getExp());
    }

    public function testUpgradePassword(): void
    {
        $user = $this->userRepository->findOneByEmail('test1@example.com');
        $this->assertNotNull($user);

        $newHashedPassword = 'new_hashed_password';
        $this->userRepository->upgradePassword($user, $newHashedPassword);

        $updatedUser = $this->userRepository->findOneByEmail('test1@example.com');
        $this->assertEquals($newHashedPassword, $updatedUser->getPassword());
    }

    protected function tearDown(): void
    {
        parent::tearDown();
        $this->entityManager->close();
    }
}